Мақала 1.

Түйіндеме

Кілттер жұбы – ашық кілт пен құпия немесе «жабық» кілттің сәйкес жұбы.

Ашық кілт Solana желісіндегі тіркелгіні көрсететін «мекенжай» ретінде пайдаланылады. Ашық кілтті кез келген адаммен бөлісуге болады.

Құпия кілт есептік жазбаның өкілеттігін тексеру үшін пайдаланылады. Аты айтып тұрғандай, құпия кілттерді әрқашан құпия сақтау керек.

@solana/web3.js жаңа кілттер жұбын жасауға немесе бұрыннан бар құпия кілтті пайдаланып кілттер жұбын құруға арналған көмекші функцияларды қамтамасыз етеді.

Сабақ

Симметриялық және асимметриялық криптография

«Криптография» сөзбе-сөз жасырын ақпаратты зерттеу болып табылады. Сіз күнде кездесетін криптографияның екі негізгі түрі бар:

Симметриялық криптография - шифрлау және шифрды шешу үшін бірдей кілт пайдаланылатын жерде. Оған жүздеген жылдар болды және оны ежелгі мысырлықтардан бастап патшайым Елизавета I-ге дейін барлығы пайдаланды.

Симметриялық криптографиялық алгоритмдердің алуан түрі бар, бірақ бүгінгі күні ең көп таралғандары AES және Chacha20.

Асимметриялық криптография

Асимметриялық криптография – «ашық кілтті криптография» деп те аталды, 1970-ші жылдары жасалған. Асимметриялық криптографияда қатысушылардың кілттері (немесе кілттер жұбы) болады. Әрбір кілттер жұбы құпия кілт пен ашық кілттен тұрады. Асимметриялық шифрлау симметриялық шифрлаудан басқаша жұмыс істейді және әртүрлі әрекеттерді орындай алады:

Шифрлау: егер ол ашық кілтпен шифрланған болса, оны оқу үшін тек сол кілттер жұбындағы құпия кілтті пайдалануға болады.

Қолтаңбалар: егер ол құпия кілтпен шифрланған болса, құпия кілт иесінің оған қол қойғанын дәлелдеу үшін сол кілттер жұбындағы ашық кілтті пайдалануға болады.

Сіз тіпті симметриялық криптография үшін жақсы кілтті әзірлеу үшін асимметриялық криптографияны пайдалана аласыз! Бұл кілт алмасу деп аталады, мұнда сіз бір реттік кілтін жасау үшін ашық кілттеріңізді және алушының ашық кілтін пайдаланасыз.

Әртүрлі асимметриялық криптографиялық алгоритмдер бар, бірақ сіз бүгінде ең көп кездесетіні - ECC немесе RSA нұсқалары.

Асимметриялық шифрлау өте танымал:

Сіздің банк картаңыздың ішінде транзакцияларға қол қою үшін пайдаланылатын құпия кілт бар.

Сіздің банк транзакция жасағаныңызды сәйкес ашық кілтпен тексеру арқылы растай алады.

Веб-сайттар өздерінің сертификатында ашық кілтті қамтиды. Браузеріңіз веб-бетке жіберетін деректерді (мысалы, жеке ақпарат, кіру мәліметтері және несие картасы нөмірлері) шифрлау үшін осы ашық кілтті пайдаланады.

Веб-сайт деректерді оқи алатындай сәйкес веб-сайтта жеке кілт бар.

Сіздің электрондық төлқұжатыңызға төлқұжаттың жалған еместігіне көз жеткізу үшін оны берген ел қол қойған.

Электрондық төлқұжат қақпалары мұны сіздің еліңіздің ашық кілті арқылы растай алады.

Телефондағы хабар алмасу қолданбалары сеанс кілтін жасау үшін кілт алмасуды пайдаланады.

Бір сөзбен айтқанда, криптография біздің айналамызда. Solana, басқа блокчейндер сияқты, криптографияның бір ғана қолданылуы.

Solana мекенжайлар ретінде ашық кілттерді пайдаланады

Solana әмиян мекенжайлары

Solana желісіне қатысатын адамдарда кемінде бір кілттер жұбы болады. Solana-да:

Ашық кілт Solana желісіндегі тіркелгіні көрсететін «мекенжай» ретінде пайдаланылады. Тіпті мейірімді атаулар - example.sol сияқты - dDCQNnDmNbFVi8cQhKAgXhyhXeJ625tvwsunRyRc7c8 сияқты мекенжайларды көрсетеді.

Құпия кілт сол кілттер жұбындағы өкілеттікті тексеру үшін пайдаланылады. Егер сізде мекен-жайдың құпия кілті болса, сіз сол мекенжайдың ішіндегі таңбалауыштарды басқарасыз. Осы себепті, аты айтып тұрғандай, құпия кілттерді әрқашан құпия сақтау керек.

2-бап (https://www.soldev.app/course/intro-to-reading-data)

Түйіндеме

SOL — Solana-ның төл токенінің атауы. Әрбір SOL 1 миллиард Lamport-тан жасалған.

Тіркелгілер токендерді, NFT-лерді, бағдарламалар мен деректерді сақтайды. Әзірге біз SOL сақтайтын тіркелгілерге назар аударамыз.

Мекенжайлар Solana желісіндегі тіркелгілерге нұсқайды. Кез келген адам берілген мекенжайдағы деректерді оқи алады. Көптеген мекенжайлар да ашық кілттер болып табылады.

Сабақ

Есептік жазбалар

Solana-да сақталған барлық деректер тіркелгілерде сақталады. Тіркелгілер сақтай алады:

SOL

USDC сияқты басқа белгілер

NFTs

Бұл курста біз жасайтын фильмдерді шолу бағдарламасы сияқты бағдарламалар!

Жоғарыдағы бағдарламаға арналған фильмге шолу сияқты бағдарлама деректері!

SOL

SOL - Solana-ның төл токені - SOL транзакциялық комиссияларды төлеу, шоттар үшін жалдау ақысын төлеу және т.б. үшін пайдаланылады. SOL кейде ◎ белгісімен көрсетіледі . Әрбір SOL 1 миллиард Lamport-тан жасалған.

Қаржылық қолданбалар әдетте математиканы центпен (АҚШ доллары үшін), пенспен (GBP үшін) жасайтын сияқты, Solana қолданбалары әдетте SOL-ды Lamports ретінде тасымалдайды, жұмсайды, сақтайды және өңдейді, тек пайдаланушыларға көрсету үшін толық SOL түріне түрлендіреді.

Мекенжайлар

Мекенжайлар тіркелгілерді бірегей түрде анықтайды. Мекенжайлар жиі dDCQNnDmNbFVi8cQhKAgXhyhXeJ625tvwsunRyRc7c8 сияқты базалық-58 кодталған жолдар ретінде көрсетіледі. Solana-дағы мекенжайлардың көпшілігі де ашық кілттер болып табылады. Алдыңғы тарауда айтылғандай, мекенжайдың сәйкес құпия кілтін басқаратын адам есептік жазбаны басқарады - мысалы, құпия кілті бар адам тіркелгіден белгілерді жібере алады.

3-бап (https://www.soldev.app/course/intro-to-writing-data)

Түйіндеме

On-chain деректеріне немесе "тізбек ішіндегі деректерге" барлық өзгертулер транзакциялар арқылы жүзеге асырылады. Транзакциялар негізінен Solana бағдарламаларын шақыратын нұсқаулар жиынтығы болып табылады. Транзакциялар атомдық болып табылады, яғни олар сәтті болады - егер барлық нұсқаулар дұрыс орындалса - немесе транзакция мүлде орындалмаған сияқты сәтсіз болады.

Сабақ

Мәмілелер атомдық болып табылады

On-chain деректеріне кез келген өзгерту бағдарламаларға жіберілген транзакциялар арқылы жүзеге асады.

Solana-дағы транзакция басқа жердегі транзакцияға ұқсас: ол атомдық. Атомдық бүкіл транзакция орындалады немесе сәтсіз аяқталады дегенді білдіреді.

Интернетте бір нәрсе үшін төлеу туралы ойланыңыз:

Сіздің шотыңыздың қалдығы дебеттеледі

Банк ақшаны саудагерге аударады

Транзакция сәтті болуы үшін бұл екі нәрсе де болуы керек. Егер олардың біреуі сәтсіздікке ұшыраса, сатушыға төлем жасамай, шотыңызды дебетке түсірмеу немесе шоттан дебеттеп, бірақ сатушыға төлем жасамау үшін, бұлардың ешқайсысы орын алмағаны жақсы.

Атомдық транзакцияның орындалатынын білдіреді - бұл барлық жеке қадамдар сәтті аяқталады - немесе бүкіл транзакция сәтсіз аяқталады.

Мәмілелер нұсқауларды қамтиды

Solana-дағы транзакциядағы қадамдар нұсқаулар деп аталады.

Әрбір нұсқаулық мыналарды қамтиды:

оқылатын және/немесе жазылатын шоттардың жиыны. Бұл Solana-ны жылдам етеді - әртүрлі шоттарға әсер ететін транзакциялар бір уақытта өңделеді

шақыру үшін бағдарламаның ашық кілті

байт массиві ретінде құрылымдалған, шақырылатын бағдарламаға берілетін деректер

Транзакция іске қосылғанда, бір немесе бірнеше Solana бағдарламасы транзакцияға енгізілген нұсқаулармен бірге шақырылады.

4-бап (https://www.soldev.app/course/interact-with-wallets)

Түйіндеме

Әмияндар сіздің құпия кілтіңізді сақтайды және транзакцияға қауіпсіз қол қоюды басқарады

Аппараттық әмияндар сіздің құпия кілтіңізді бөлек құрылғыда сақтайды

Бағдарламалық әмияндар компьютеріңізді қауіпсіз сақтау үшін пайдаланады

Бағдарламалық жасақтама әмияндары көбінесе веб-сайттарға қосылуды жеңілдететін шолғыш кеңейтімдері болып табылады

Solana's Wallet-Adapter кітапханасы әмиян браузерінің кеңейтімдерін қолдауды жеңілдетеді, бұл сізге пайдаланушының әмиян мекенжайын сұрай алатын және оларға қол қою үшін транзакцияларды ұсына алатын веб-сайттарды құруға мүмкіндік береді.

Сабақ

Әмияндар

Алдыңғы екі сабақта біз кілттер жұбын талқыладық. Кілттік жұптар шоттарды табу және транзакцияларға қол қою үшін пайдаланылады. Кілттер жұбының ашық кілтін ортақ пайдалану өте қауіпсіз болғанымен, құпия кілт әрқашан қауіпсіз жерде сақталуы керек. Егер пайдаланушының құпия кілті әшкере болса, онда зиянды әрекетші олардың есептік жазбасын барлық активтерден шығарып, сол пайдаланушының өкілеттігімен транзакцияларды орындауы мүмкін.

«Әмиян» құпия кілтті қауіпсіз сақтау үшін сақтайтын кез келген нәрсені білдіреді. Бұл қауіпсіз сақтау опциялары әдетте «аппараттық» немесе «бағдарламалық құрал» әмияндары ретінде сипатталуы мүмкін. Аппараттық әмияндар – компьютерден бөлек сақтау құрылғылары. Бағдарламалық құрал әмияндары - бар құрылғыларға орнатуға болатын қолданба.

Бағдарламалық жасақтама әмияндары көбінесе браузер кеңейтімі түрінде келеді. Бұл веб-сайттарға әмиянмен оңай әрекеттесуге мүмкіндік береді. Мұндай өзара әрекеттесу әдетте мыналармен шектеледі:

Әмиянның ашық кілтін (мекен-жайын) көру

Пайдаланушының бекітуіне транзакцияларды жіберу

Мақұлданған транзакцияны желіге жіберу

Транзакция жіберілгеннен кейін соңғы пайдаланушы транзакцияны «растауы» және оны «қолтаңбасымен» желіге жібере алады.

Транзакцияларға қол қою құпия кілтті пайдалануды талап етеді. Сайтқа транзакцияны әмияныңызға жіберуге және қол қоюды әмиянға беру арқылы сіз ешқашан құпия кілтіңізді веб-сайтқа көрсетпеуіңізге кепілдік бересіз. Оның орнына сіз құпия кілтті әмиян қолданбасымен ғана бөлісесіз.

Әмиян қолданбасын өзіңіз жасамасаңыз, кодыңыз ешқашан пайдаланушыдан құпия кілтін сұраудың қажеті жоқ. Оның орнына сіз пайдаланушылардан беделді әмиянды пайдаланып сайтыңызға қосылуды сұрай аласыз.

Phantom Wallet

Solana экожүйесінде ең көп қолданылатын бағдарламалық әмияндардың бірі - Phantom. Phantom ең танымал бірнеше браузерлерді қолдайды және жолда қосылуға арналған мобильді қолданбасы бар. Сіз орталықтандырылмаған қолданбаларыңыздың бірнеше әмиянды қолдағанын қалауыңыз мүмкін, бірақ бұл курс Phantom-ға бағытталған.

Solana-ның әмиян-адаптері

Solana's Wallet-Adapter - әмиян браузерінің кеңейтімдерін қолдау процесін жеңілдету үшін пайдалануға болатын кітапханалар жиынтығы.

Solana's Wallet-Adapter бірнеше модульдік пакеттерден тұрады. Негізгі функционалдылық @solana/wallet-adapter-base және @solana/wallet-adapter-react ішінде бар.

Сондай-ақ жалпы UI шеңберлері үшін құрамдастарды қамтамасыз ететін пакеттер бар. Осы сабақта және осы курста біз @solana/wallet-adapter-react-ui компоненттерін қолданамыз.

Соңында, Phantom қоса алғанда, белгілі бір әмияндарға арналған адаптерлер болып табылатын пакеттер бар. Қолдау көрсетілетін әмияндардың барлығын қосу үшін @solana/wallet-adapter-wallet қолданбасын пайдалануға болады немесе @solana/wallet-adapter-phantom сияқты арнайы әмиян пакетін таңдауға болады.

Әмиян-адаптер кітапханаларын орнатыңыз

Қолданыстағы реакция қолданбасына әмиянды қолдауды қосқанда, сіз сәйкес пакеттерді орнатудан бастайсыз. Сізге керек болады

Әмиян стандартын қолдайтын барлық әмияндарға қораптан тыс қолдау көрсетіледі және барлық дерлік Solana әмияндары әмиян стандартын қолдайды. Дегенмен, стандартты қолдамайтын кез келген әмияндарға қолдау қосқыңыз келсе, олар үшін пакет қосыңыз.

5-бап (https://www.soldev.app/course/serialize-instruction-data)

Түйіндеме

Транзакциялар жиынтық нұсқаулардан тұрады, бір транзакцияда нұсқаулардың кез келген саны болуы мүмкін, олардың әрқайсысы өз бағдарламасына бағытталған. Транзакция жіберілген кезде, Solana орындалу уақыты өз нұсқауларын ретімен және атомдық түрде өңдейді, яғни нұсқаулардың кез келгені қандай да бір себептермен орындалмаса, бүкіл транзакция өңделмейді.

Әрбір нұсқау 3 құрамдас бөліктен тұрады: жоспарланған бағдарламаның идентификаторы, барлық тартылған тіркелгілердің массиві және нұсқаулық деректерінің байт буфері.

Әрбір транзакция мыналарды қамтиды: оқуға немесе жазуға ниет білдірген барлық тіркелгілердің массиві, бір немесе бірнеше нұсқаулар, соңғы блоктың хэші және бір немесе бірнеше қолтаңба.

Клиенттен нұсқау деректерін беру үшін оны байт буферіне сериялау керек. Бұл сериялау процесін жеңілдету үшін біз Borsh қолданамыз.

Блокчейн транзакцияларды кез келген себептерге байланысты өңдей алмауы мүмкін, біз осы жерде ең көп таралғандардың кейбірін талқылаймыз.

Сабақ

Мәмілелер

Транзакциялар - бұл өңдеу үшін ақпаратты блокчейнге жіберу әдісі. Осы уақытқа дейін біз шектеулі функционалдығы бар өте қарапайым транзакцияларды жасауды үйрендік. Бірақ транзакциялар және олар жіберілетін бағдарламалар біз осы уақытқа дейін қарастырғанымыздан әлдеқайда икемді және күрделірек болуы үшін жобалануы мүмкін.

Транзакция мазмұны

Әрбір транзакция мыналарды қамтиды:

Ол оқуға немесе жазуға ниеттенген әрбір тіркелгіні қамтитын массив

Бір немесе бірнеше нұсқаулар

Жақында жасалған блоктың хеші

Бір немесе бірнеше қолтаңба

@solana/web3.js бұл процесті сіз үшін жеңілдетеді, сондықтан сізге тек нұсқаулар мен қолтаңбаларды қосуға назар аудару қажет. Кітапхана сол ақпарат негізінде тіркелгілер жиымын жасайды және соңғы блокхашты қосу логикасын өңдейді.

Нұсқаулар

Әрбір нұсқаулық мыналарды қамтиды:

Белгіленген бағдарламаның бағдарлама идентификаторы (ашық кілт).

Орындау кезінде оқылатын немесе жазылатын әрбір тіркелгі тізімі бар массив

Нұсқау деректерінің байт буфері

Бағдарламаны оның ашық кілті арқылы анықтау нұсқаудың дұрыс бағдарлама арқылы орындалуын қамтамасыз етеді.

Оқылатын немесе жазылатын әрбір тіркелгі массивін қоса алғанда, желіге транзакцияның жоғары жүктемесін және жылдам орындалуын қамтамасыз ететін бірқатар оңтайландыруларды орындауға мүмкіндік береді.

Байт буфері бағдарламаға сыртқы деректерді жіберуге мүмкіндік береді.

Бір транзакцияға бірнеше нұсқауларды қосуға болады. Solana орындау уақыты осы нұсқауларды ретімен және атомдық түрде өңдейді. Басқаша айтқанда, егер әрбір нұсқау сәтті болса, транзакция тұтастай сәтті болады, бірақ бір нұсқау сәтсіз болса, онда барлық транзакция жанама әсерлерсіз бірден сәтсіздікке ұшырайды.

Тіркелгі массиві тіркелгілердің ашық кілттерінің массиві ғана емес. Жиымдағы әрбір нысан транзакцияға қол қоюшы болып табыла ма, жоқ па және оның жазылуы мүмкін бе, жоқ па, тіркелгінің ашық кілтін қамтиды. Нұсқауларды орындау кезінде тіркелгінің жазылуы немесе жазылмайтынын қоса алғанда, орындалу уақытына смарт келісім-шарттарды параллель өңдеуді жеңілдетуге мүмкіндік береді. Қай тіркелгілердің тек оқуға арналғанын және қайсысына жазатыныңызды анықтауыңыз керек болғандықтан, орындалу уақыты қай транзакциялардың қабаттаспайтынын немесе тек оқуға арналған екенін анықтай алады және оларды бір уақытта орындауға мүмкіндік береді. Solana-ның жұмыс уақыты туралы көбірек білу үшін осы блог жазбасын қараңыз.

Нұсқаулық деректер

Нұсқауларға ерікті деректерді қосу мүмкіндігі, HTTP сұрауының негізгі бөлігі динамикалық және икемді REST API интерфейстерін құруға мүмкіндік беретіндей кең қолдану жағдайлары үшін бағдарламалардың жеткілікті динамикалық және икемді болуын қамтамасыз етеді.

HTTP сұрауының негізгі құрылымы сіз шақырғыңыз келетін соңғы нүктеге тәуелді болатыны сияқты, нұсқаулық деректері ретінде пайдаланылатын байт буферінің құрылымы толығымен алушы бағдарламасына байланысты. Толық стек dApp бағдарламасын өзіңіз құрастырып жатсаңыз, бағдарламаны құру кезінде пайдаланған құрылымды клиенттік кодқа көшіру қажет болады . Бағдарламаны өңдеумен айналысатын басқа әзірлеушімен жұмыс істеп жатсаңыз, буфер макеттерінің сәйкестігін қамтамасыз ету үшін үйлестіруге болады.

Нақты мысалды қарастырайық. Web3 ойынында жұмыс істеп, ойыншыларды инвентарь бағдарламасымен әрекеттесетін клиенттік кодты жазуға жауапты болуды елестетіп көріңіз. Бағдарлама клиентке мүмкіндік беру үшін жасалған:

Ойыншының ойын нәтижелеріне негізделе инвентарь қосыңыз

Инвентарьды бір ойыншыдан екіншісіне тасымалдау

Ойыншыны таңдалған инвентарь элементтерімен жабдықтаңыз

Бұл бағдарлама олардың әрқайсысы өз функцияларында инкапсуляцияланған етіп құрылымдалған болар еді.

Дегенмен, әрбір бағдарламаның бір ғана кіру нүктесі бар. Нұсқау деректері арқылы бағдарламаға осы функциялардың қайсысын орындауға нұсқау бересіз.

Сондай-ақ нұсқаулық деректеріне функцияның дұрыс орындалуы үшін қажет кез келген ақпаратты қосасыз, мысалы, инвентаризация элементінің идентификаторы, инвентарлық қорды тасымалдауға арналған ойыншы және т.б.

Бұл деректердің дәл құрылымы бағдарламаның қалай жазылғанына байланысты болады, бірақ нұсқаулық деректеріндегі бірінші өріс бағдарлама функциямен салыстыра алатын сан болуы әдеттегідей, содан кейін қосымша өрістер функция аргументтері ретінде әрекет етеді.

Серияландыру

Нұсқау деректерінің буферіне қандай ақпаратты қосу керектігін білумен қатар, оны дұрыс сериялау қажет. Solana-да қолданылатын ең көп тараған сериализатор - Borsh. Сайт бойынша:

Borsh хэширлеуге арналған екілік нысанды көрсету сериялық құралын білдіреді. Ол қауіпсіздік үшін маңызды жобаларда қолдануға арналған, өйткені ол жүйелілікке, қауіпсіздікке, жылдамдыққа басымдық береді; және қатаң спецификациямен келеді.

Borsh жалпы типтерді буферге сериялауды өңдейтін JS кітапханасын қолдайды. Сондай-ақ, бұл процесті жеңілдетуге тырысатын борштың үстіне салынған басқа пакеттер бар. Біз npm көмегімен орнатуға болатын @coral-xyz/borsh кітапханасын қолданамыз.

Алдыңғы ойын инвентаризациясының мысалына сүйене отырып, бағдарламаға ойыншыны берілген элементпен жабдықтауға нұсқау беретін гипотетикалық сценарийді қарастырайық. Бағдарлама келесі сипаттары бар құрылымды көрсететін буферді қабылдауға арналған делік:

нұсқа таңбаланбаған, 8 разрядты бүтін сан ретінде бағдарламаға қандай нұсқауды немесе функцияны орындауға нұсқау береді.

playerId берілген элементпен жабдықталуы тиіс ойыншының ойыншы идентификаторын көрсететін таңбасыз, 16 биттік бүтін сан ретінде.

itemId белгісі қойылмаған, берілген ойнатқышқа жабдықталатын элементтің идентификаторын көрсететін 256 биттік бүтін сан ретінде.
