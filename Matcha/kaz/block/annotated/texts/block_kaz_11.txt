

5-бап (https://www.soldev.app/course/serialize-instruction-data)

Түйіндеме

Транзакциялар жиынтық нұсқаулардан тұрады, бір транзакцияда нұсқаулардың кез келген саны болуы мүмкін, олардың әрқайсысы өз бағдарламасына бағытталған. Транзакция жіберілген кезде, Solana орындалу уақыты өз нұсқауларын ретімен және атомдық түрде өңдейді, яғни нұсқаулардың кез келгені қандай да бір себептермен орындалмаса, бүкіл транзакция өңделмейді.

Әрбір нұсқау 3 құрамдас бөліктен тұрады: жоспарланған бағдарламаның идентификаторы, барлық тартылған тіркелгілердің массиві және нұсқаулық деректерінің байт буфері.

Әрбір транзакция мыналарды қамтиды: оқуға немесе жазуға ниет білдірген барлық тіркелгілердің массиві, бір немесе бірнеше нұсқаулар, соңғы блоктың хэші және бір немесе бірнеше қолтаңба.

Клиенттен нұсқау деректерін беру үшін оны байт буферіне сериялау керек. Бұл сериялау процесін жеңілдету үшін біз Borsh қолданамыз.

Блокчейн транзакцияларды кез келген себептерге байланысты өңдей алмауы мүмкін, біз осы жерде ең көп таралғандардың кейбірін талқылаймыз.

Сабақ

Мәмілелер

Транзакциялар - бұл өңдеу үшін ақпаратты блокчейнге жіберу әдісі. Осы уақытқа дейін біз шектеулі функционалдығы бар өте қарапайым транзакцияларды жасауды үйрендік. Бірақ транзакциялар және олар жіберілетін бағдарламалар біз осы уақытқа дейін қарастырғанымыздан әлдеқайда икемді және күрделірек болуы үшін жобалануы мүмкін.

Транзакция мазмұны

Әрбір транзакция мыналарды қамтиды:

Ол оқуға немесе жазуға ниеттенген әрбір тіркелгіні қамтитын массив

Бір немесе бірнеше нұсқаулар

Жақында жасалған блоктың хеші

Бір немесе бірнеше қолтаңба

@solana/web3.js бұл процесті сіз үшін жеңілдетеді, сондықтан сізге тек нұсқаулар мен қолтаңбаларды қосуға назар аудару қажет. Кітапхана сол ақпарат негізінде тіркелгілер жиымын жасайды және соңғы блокхашты қосу логикасын өңдейді.

Нұсқаулар

Әрбір нұсқаулық мыналарды қамтиды:

Белгіленген бағдарламаның бағдарлама идентификаторы (ашық кілт).

Орындау кезінде оқылатын немесе жазылатын әрбір тіркелгі тізімі бар массив

Нұсқау деректерінің байт буфері

Бағдарламаны оның ашық кілті арқылы анықтау нұсқаудың дұрыс бағдарлама арқылы орындалуын қамтамасыз етеді.

Оқылатын немесе жазылатын әрбір тіркелгі массивін қоса алғанда, желіге транзакцияның жоғары жүктемесін және жылдам орындалуын қамтамасыз ететін бірқатар оңтайландыруларды орындауға мүмкіндік береді.

Байт буфері бағдарламаға сыртқы деректерді жіберуге мүмкіндік береді.

Бір транзакцияға бірнеше нұсқауларды қосуға болады. Solana орындау уақыты осы нұсқауларды ретімен және атомдық түрде өңдейді. Басқаша айтқанда, егер әрбір нұсқау сәтті болса, транзакция тұтастай сәтті болады, бірақ бір нұсқау сәтсіз болса, онда барлық транзакция жанама әсерлерсіз бірден сәтсіздікке ұшырайды.

Тіркелгі массиві тіркелгілердің ашық кілттерінің массиві ғана емес. Жиымдағы әрбір нысан транзакцияға қол қоюшы болып табыла ма, жоқ па және оның жазылуы мүмкін бе, жоқ па, тіркелгінің ашық кілтін қамтиды. Нұсқауларды орындау кезінде тіркелгінің жазылуы немесе жазылмайтынын қоса алғанда, орындалу уақытына смарт келісім-шарттарды параллель өңдеуді жеңілдетуге мүмкіндік береді. Қай тіркелгілердің тек оқуға арналғанын және қайсысына жазатыныңызды анықтауыңыз керек болғандықтан, орындалу уақыты қай транзакциялардың қабаттаспайтынын немесе тек оқуға арналған екенін анықтай алады және оларды бір уақытта орындауға мүмкіндік береді. Solana-ның жұмыс уақыты туралы көбірек білу үшін осы блог жазбасын қараңыз.

Нұсқаулық деректер

Нұсқауларға ерікті деректерді қосу мүмкіндігі, HTTP сұрауының негізгі бөлігі динамикалық және икемді REST API интерфейстерін құруға мүмкіндік беретіндей кең қолдану жағдайлары үшін бағдарламалардың жеткілікті динамикалық және икемді болуын қамтамасыз етеді.

HTTP сұрауының негізгі құрылымы сіз шақырғыңыз келетін соңғы нүктеге тәуелді болатыны сияқты, нұсқаулық деректері ретінде пайдаланылатын байт буферінің құрылымы толығымен алушы бағдарламасына байланысты. Толық стек dApp бағдарламасын өзіңіз құрастырып жатсаңыз, бағдарламаны құру кезінде пайдаланған құрылымды клиенттік кодқа көшіру қажет болады . Бағдарламаны өңдеумен айналысатын басқа әзірлеушімен жұмыс істеп жатсаңыз, буфер макеттерінің сәйкестігін қамтамасыз ету үшін үйлестіруге болады.

Нақты мысалды қарастырайық. Web3 ойынында жұмыс істеп, ойыншыларды инвентарь бағдарламасымен әрекеттесетін клиенттік кодты жазуға жауапты болуды елестетіп көріңіз. Бағдарлама клиентке мүмкіндік беру үшін жасалған:

Ойыншының ойын нәтижелеріне негізделе инвентарь қосыңыз

Инвентарьды бір ойыншыдан екіншісіне тасымалдау

Ойыншыны таңдалған инвентарь элементтерімен жабдықтаңыз

Бұл бағдарлама олардың әрқайсысы өз функцияларында инкапсуляцияланған етіп құрылымдалған болар еді.

Дегенмен, әрбір бағдарламаның бір ғана кіру нүктесі бар. Нұсқау деректері арқылы бағдарламаға осы функциялардың қайсысын орындауға нұсқау бересіз.

Сондай-ақ нұсқаулық деректеріне функцияның дұрыс орындалуы үшін қажет кез келген ақпаратты қосасыз, мысалы, инвентаризация элементінің идентификаторы, инвентарлық қорды тасымалдауға арналған ойыншы және т.б.

Бұл деректердің дәл құрылымы бағдарламаның қалай жазылғанына байланысты болады, бірақ нұсқаулық деректеріндегі бірінші өріс бағдарлама функциямен салыстыра алатын сан болуы әдеттегідей, содан кейін қосымша өрістер функция аргументтері ретінде әрекет етеді.

Серияландыру

Нұсқау деректерінің буферіне қандай ақпаратты қосу керектігін білумен қатар, оны дұрыс сериялау қажет. Solana-да қолданылатын ең көп тараған сериализатор - Borsh. Сайт бойынша:

Borsh хэширлеуге арналған екілік нысанды көрсету сериялық құралын білдіреді. Ол қауіпсіздік үшін маңызды жобаларда қолдануға арналған, өйткені ол жүйелілікке, қауіпсіздікке, жылдамдыққа басымдық береді; және қатаң спецификациямен келеді.

Borsh жалпы типтерді буферге сериялауды өңдейтін JS кітапханасын қолдайды. Сондай-ақ, бұл процесті жеңілдетуге тырысатын борштың үстіне салынған басқа пакеттер бар. Біз npm көмегімен орнатуға болатын @coral-xyz/borsh кітапханасын қолданамыз.

Алдыңғы ойын инвентаризациясының мысалына сүйене отырып, бағдарламаға ойыншыны берілген элементпен жабдықтауға нұсқау беретін гипотетикалық сценарийді қарастырайық. Бағдарлама келесі сипаттары бар құрылымды көрсететін буферді қабылдауға арналған делік:

нұсқа таңбаланбаған, 8 разрядты бүтін сан ретінде бағдарламаға қандай нұсқауды немесе функцияны орындауға нұсқау береді.

playerId берілген элементпен жабдықталуы тиіс ойыншының ойыншы идентификаторын көрсететін таңбасыз, 16 биттік бүтін сан ретінде.

itemId белгісі қойылмаған, берілген ойнатқышқа жабдықталатын элементтің идентификаторын көрсететін 256 биттік бүтін сан ретінде.
